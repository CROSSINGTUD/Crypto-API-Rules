SPEC javax.crypto.SecretKeyFactory
OBJECTS
    java.lang.String keyAlgorithm;
    javax.crypto.SecretKey key;
    javax.crypto.SecretKey otherKey;
    java.security.spec.KeySpec keySpec;
   
EVENTS
    g1: getInstance(keyAlgorithm);
    g2: getInstance(keyAlgorithm, _);
    Gets := g1 | g2;

    gS: key = generateSecret(keySpec);
    tK: key = translateKey(otherKey);
    
    Gens := gS | tK;

ORDER
    Gets, Gens

CONSTRAINTS
	keyAlgorithm in {"AES","PBKDF2WithHmacSHA512", "PBKDF2WithHmacSHA384", "PBKDF2WithHmacSHA256", "PBKDF2WithHmacSHA224", "PBEWithHmacSHA512AndAES_128","PBEWithHmacSHA384AndAES_128", "PBEWithHmacSHA384AndAES_128", "PBEWithHmacSHA224AndAES_128", "PBEWithHmacSHA256AndAES_128","PBEWithHmacSHA224AndAES_256", "PBEWithHmacSHA256AndAES_256", "PBEWithHmacSHA384AndAES_256", "PBEWithHmacSHA512AndAES_256"};

REQUIRES
	keyAlgorithm in {"AES"} => speccedSymmetricKeySpec[keySpec, keyAlgorithm];
	keyAlgorithm in {"PBKDF2WithHmacSHA512", "PBKDF2WithHmacSHA384", "PBKDF2WithHmacSHA256", "PBKDF2WithHmacSHA224", "PBEWithHmacSHA512AndAES_128","PBEWithHmacSHA384AndAES_128", "PBEWithHmacSHA384AndAES_128", "PBEWithHmacSHA224AndAES_128", "PBEWithHmacSHA256AndAES_128","PBEWithHmacSHA224AndAES_256", "PBEWithHmacSHA256AndAES_256", "PBEWithHmacSHA384AndAES_256", "PBEWithHmacSHA512AndAES_256"} => speccedPBEKeySpec[keySpec, _];
	
ENSURES
    generatedKey[key, keyAlgorithm];