SPEC javax.crypto.KeyAgreement

OBJECTS
	java.lang.String keyExchangeAlgorithm;
	java.lang.String symmetricKeyAlgorithm;
	java.security.Key firstKey;
	java.security.Key secondKey;
	javax.crypto.SecretKey sharedKey;
	byte[] sharedKeyBuffer;
	boolean lastPhase;
	int offset;
	java.security.spec.AlgorithmParameterSpec params;
	java.security.SecureRandom random;
	
EVENTS
	g1: getInstance(keyExchangeAlgorithm);
    g2: getInstance(keyExchangeAlgorithm, _);
    Gets := g1 | g2;
    
    i1: init(firstKey);
    i2: init(firstKey, params);
    i3: init(firstKey, params, random);
    i4: init(firstKey, random);
    Inits := i1 | i2 | i3 | i4;
    
    dp: doPhase(secondKey, lastPhase);
    
    gs1: sharedKeyBuffer = generateSecret();
    gs2: generateSecret(sharedKeyBuffer, offset);
    KeyMat := gs1 | gs2;
    
    gs3: sharedKey = generateSecret(symmetricKeyAlgorithm);
    
ORDER
	Gets, Inits, dp, KeyMat | gs3
	
CONSTRAINTS
	keyExchangeAlgorithm in {"DH", "DiffieHellman", "ECDH", "ECMQV"};
	symmetricKeyAlgorithm in {"AES", "HmacSHA224", "HmacSHA256", "HmacSHA384", "HmacSHA512"};
	
REQUIRES
    randomized[random];
   	generatedPrivKey[firstKey, _];
   	generatedPubKey[secondKey, _];
    keyExchangeAlgorithm in {"DiffieHellman", "DH"} => preparedDH[params];
    keyExchangeAlgorithm in {"ECDH", "ECMQV"} => preparedEC[params];
   	
ENSURES 
    generatedKey[sharedKey, symmetricKeyAlgorithm] after gs3;
    preparedKeyMaterial[sharedKeyBuffer] after KeyMat;	