SPEC javax.crypto.Cipher
USES_OBJECTS
    java.lang.String transformation;
    int encmode;
    javax.crypto.SecretKey key;
    java.security.cert.Certificate cert;
    java.security.spec.AlgorithmParameterSpec params;
    java.security.AlgorithmParameters param;
    
    int pre_plain_off;
    int pre_ciphertext_off;
    int plain_off;
    int ciphertext_off;
    
    int pre_len;
    int len;
    
    byte[] pre_plaintext;
    byte[] pre_ciphertext;
    
    byte[] plainText;
    byte[] cipherText;
	java.nio.ByteBuffer plainBuffer;
	java.nio.ByteBuffer cipherBuffer;

REQUIRED_EVENTS
    g1: getInstance(transformation);
    g2:getInstance(transformation, _);
    Gets := g1, g2; //AES/CTR/PKCS5Padding

    i1: init(encmode, cert);
    i2: init(encmode, cert, _);
    i3: init(encmode, key);
    i4: init(encmode, key, params);
    i5: init(encmode, key, param);
    i6: init(encmode, key, params, _);
    i7: init(encmode, key, param, _);
    i8: init(encmode, key, _);
    IWOIV := i1, i2, i3, i8;
    IWIV := i3, i4, i5, i6, i7;
    Inits := IWOIV, IWIV;


    u1: pre_ciphertext = update(pre_plaintext);
    u2: pre_ciphertext = update(pre_plaintext, pre_plain_off, _);
    u3: update(pre_plaintext, pre_plain_off, pre_len, pre_ciphertext);
    u4: update(pre_plaintext, pre_plain_off, pre_len, pre_ciphertext, pre_ciphertext_off);
    u5: update(pre_plaintext, pre_ciphertext);
    updates := u1, u2, u3, u4, u5;


    f1: cipherText = doFinal();
    f2: cipherText =  doFinal(plainText);
    f3: doFinal(cipherText, plain_off);
    f4: cipherText = doFinal(cipherText, plain_off, len);
    f5: doFinal(plainText, plain_off, len, cipherText);
    f6: doFinal(plainText, plain_off, len, cipherText, ciphertext_off);
    f7: doFinal(plainBuffer, cipherBuffer);
    FINWOU := f2, f5, f6, f7;
    DOFINALS := FINWOU, f1, f3, f4;
    
    gi: getIV();
    
ENFORCE_ORDER
    Gets, Inits, (FINWOU | (updates+, DOFINALS))+

ENFORCES_CONSTRAINTS
	part(0, "/", transformation) in {"AES", "Blowfish", "DESede",  "PBEWithHmacSHA224AndAES_128", "PBEWithHmacSHA256AndAES_128", "PBEWithHmacSHA384AndAES_128", "PBEWithHmacSHA512AndAES_128", "PBEWithHmacSHA224AndAES_256", "PBEWithHmacSHA256AndAES_256", "PBEWithHmacSHA384AndAES_256", "PBEWithHmacSHA512AndAES_256", "RSA"}
    part(0, "/", transformation) in {"AES"} => part(1, "/", transformation) in {"CBC", "PCBC", "CTR", "CTS", "CFB", "CFB8..CFB128", "OFB", "OFB8..OFB128"} 
    part(0, "/", transformation) in {"Blowfish", "DESede"} => part(1, "/", transformation) in {"CBC", "PCBC", "CTR", "CTS", "CFB", "CFB8..CFB64", "OFB", "OFB8..OFB64"}
    part(0, "/", transformation) in {"PBEWithHmacSHA224AndAES_128", "PBEWithHmacSHA256AndAES_128", "PBEWithHmacSHA384AndAES_128", "PBEWithHmacSHA512AndAES_128", "PBEWithHmacSHA224AndAES_256", "PBEWithHmacSHA256AndAES_256", "PBEWithHmacSHA384AndAES_256", "PBEWithHmacSHA512AndAES_256"} => part(1, "/", transformation) in {"CBC"}
    part(0, "/", transformation) in {"RSA"} => part(1, "/", transformation) in {"ECB"}

    part(0, "/", transformation) in {"AES", "Blowfish", "DESede", "RC2"} => part(2, "/", transformation) in {"NoPadding", "PKCS5Padding", "ISO10126Padding"}
    part(0, "/", transformation) in {"PBEWithMD5AndDES", "PBEWithMD5AndTripleDES", "PBEWithSHA1AndDESede", "PBEWithSHA1AndRC2_40", "PBEWithSHA1AndRC2_128", "PBEWithSHA1AndRC4_40", "PBEWithSHA1AndRC4_128", "PBEWithHmacSHA1AndAES_128", "PBEWithHmacSHA224AndAES_128", "PBEWithHmacSHA256AndAES_128", "PBEWithHmacSHA384AndAES_128", "PBEWithHmacSHA512AndAES_128", "PBEWithHmacSHA224AndAES_256", "PBEWithHmacSHA256AndAES_256", "PBEWithHmacSHA384AndAES_256", "PBEWithHmacSHA512AndAES_256"} => part(2, "/", transformation) in {"PKCS5Padding"}
    part(0, "/", transformation) in {"RSA"} => part(2, "/", transformation) in {"OAEPWithMD5AndMGF1Padding", "OAEPWithSHA-224AndMGF1Padding", "OAEPWithSHA-256AndMGF1Padding", "OAEPWithSHA-384AndMGF1Padding", "OAEPWithSHA-512AndMGF1Padding"}
    part(1, "/", transformation) in {"CBC"} => part(2, "/", transformation) in {"PKCS5Padding", "PKCS7Padding", "ISO10126Padding"}
    
    part(1, "/", transformation) in {"CBC", "PCBC", "CTR", "CTS", "CFB", "CFB8..CFB128", "OFB", "OFB8..OFB128"} && encmode != 1 => noCallOf(IWOIV)
    part(1, "/", transformation) in {"CBC", "PCBC", "CTR", "CTS", "CFB", "CFB8..CFB128", "OFB", "OFB8..OFB128"} && encmode == 1 && noCallOf(IWIV) => gi
    
    generatedKey(key, part(0, "/", transformation));
    !macced(plainText,_);

	encmode >= 1
	encmode <= 4
    pre_plaintext.length >= pre_plain_off + len
    pre_ciphertext.length <= pre_ciphertext_off
    plainText.length <= plain_off + len
    cipherText <= ciphertext_off
		
ENSURES
    encrypted(plainText, cipherText);